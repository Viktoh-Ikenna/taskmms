import type { NextPage } from 'next'
import { useSession } from 'next-auth/react'
import { useRouter } from 'next/dist/client/router'
import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useRef, useState } from 'react'
import { connect, useDispatch, useSelector,RootStateOrAny } from 'react-redux'
import { boolean } from 'yargs'
import { actions } from '../components/actions'
import { MainBar } from '../components/mainBar'
import styles from '../styles/Home.module.css';


const Home: NextPage = (props) => {
  const { data: session } = useSession()
  const router = useRouter();
  const [showOption,setShowOptions]=useState(false)
  const [img,setInm] = useState('')
  useEffect(() => {
    if (!session) {
      router.push("/auth/credentials-signin")
    }

  }, []);

  const Dispatch = useDispatch();

const addImage =((obj:File)=>{
  Dispatch({type:actions.storeImage,payload:obj})
})


  const image = useRef<HTMLInputElement>(null)
  const handleImgClick = () => {
    if (null !== image.current) {
      image.current.dispatchEvent(
        new MouseEvent("click", {
          bubbles: true,
          cancelable: true,
          clientX: 100,
          clientY: 100,
        })
      );
    }
     
    };

    const handleimgChange = (e:any) => {
      const file = e.target.files[0];
      let reader = new FileReader();
      reader.onload = (env:any) => {
        setInm(`${env.target.result}`);
      };
      reader.readAsDataURL(file);
      // console.log(file)
      addImage(file);
    };


  const handleUplaodOptions=()=>{
    setShowOptions(!showOption)
  }
  // console.log(img)
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <meta httpEquiv='X-UA-Compatible' content='IE=edge' />
        <meta name='viewport' content='width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no' />
        <meta name='description' content='Description' />
        <meta name='keywords' content='Keywords' />
        <title>Next.js PWA Example</title>

        <link rel="manifest" href="/manifest.json" />
        <link href='/favicon-16x16.png' rel='icon' type='image/png' sizes='16x16' />
        <link href='/favicon-32x32.png' rel='icon' type='image/png' sizes='32x32' />
        <link rel="apple-touch-icon" href="/apple-icon.png"></link>
        <meta name="theme-color" content="#317EFB" />
      </Head>

      <div className="font-sans antialiased h-screen flex w-screen justify-between">
        <div className="bg-indigo-900 text-purple-100 flex-none w-24 p-6 hidden md:block ">
          
          <div className="cursor-pointer" onClick={handleUplaodOptions}>
            <div className="bg-white opacity-25 h-12 w-12 flex items-center justify-center text-black text-2xl font-semibold rounded-lg mb-1 overflow-hidden">
              <svg className="fill-current h-10 w-10 block" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M16 10c0 .553-.048 1-.601 1H11v4.399c0 .552-.447.601-1 .601-.553 0-1-.049-1-.601V11H4.601C4.049 11 4 10.553 4 10c0-.553.049-1 .601-1H9V4.601C9 4.048 9.447 4 10 4c.553 0 1 .048 1 .601V9h4.399c.553 0 .601.447.601 1z" /></svg>
            </div>
          </div>
        </div>
       <div className={`flex-1 h-screen ${showOption&&'flex'}`}>
       <div className={`bg-indigo-800 text-purple-100 h-64 flex justify-start items-start flex-col p-6 md:block md:${!showOption&&'hidden'}`} style={{animation:".3s ease-in-out 0s slideDown"}}>
    <input type="file" onChange={handleimgChange} ref={image} name="" className="hidden" id="" accept="image/*" capture="environment"/>
      
          <div className="cursor-pointer mb-4   hover:text-white" onClick={handleImgClick}>
          <div className="bg-white  hover:bg-indigo-50 opacity-25 h-12 w-12 flex hover:text-indigo-500 items-center justify-center text-black text-2xl font-semibold rounded-lg mb-1 overflow-hidden">
              <svg className="fill-current h-10 w-10 block" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M16 10c0 .553-.048 1-.601 1H11v4.399c0 .552-.447.601-1 .601-.553 0-1-.049-1-.601V11H4.601C4.049 11 4 10.553 4 10c0-.553.049-1 .601-1H9V4.601C9 4.048 9.447 4 10 4c.553 0 1 .048 1 .601V9h4.399c.553 0 .601.447.601 1z" /></svg>
            </div>
            <div className="text-center opacity-50 text-sm">Image</div>
          </div>
          <div className="cursor-pointer mb-4 ">
          <div className="bg-white opacity-25 h-12 w-12 hover:text-indigo-500 flex items-center justify-center text-black text-2xl font-semibold rounded-lg mb-1 overflow-hidden">
              <svg className="fill-current h-10 w-10 block" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M16 10c0 .553-.048 1-.601 1H11v4.399c0 .552-.447.601-1 .601-.553 0-1-.049-1-.601V11H4.601C4.049 11 4 10.553 4 10c0-.553.049-1 .601-1H9V4.601C9 4.048 9.447 4 10 4c.553 0 1 .048 1 .601V9h4.399c.553 0 .601.447.601 1z" /></svg>
            </div>
            <div className="text-center hover:text-indigo-500 opacity-50 text-sm">Vidoe</div>
          </div>
        </div>
<MainBar/>
       </div>


      </div>
    </div>
  )
}
// interface mystate{
//   SubmitPostReducer:object
// }
// const mapStateToProps = (state:mystate) => {
//   return {
//     savedImages: state.SubmitPostReducer,
//   };
// };

// //this sets the dispatch method props for the dispatching data

// const setter = (dispatch:any) => {
//   return {
//     StoreImage: (posts:Object) => {
//       dispatch({ type: "test", payload: posts });
//     }
//   };
// };



// export default connect(mapStateToProps, setter)(Home);
export default Home